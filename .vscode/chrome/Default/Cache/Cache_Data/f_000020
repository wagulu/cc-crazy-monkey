{"version":3,"sources":["game.js"],"names":["Reel","require","OnOffButton","AudioManager","UserDefault","PayTableTags","cc","Class","extends","Component","properties","reels","default","type","currentCredit","Integer","betOneValue","betMaxValue","spinButton","autoSpinButton","betOneButton","betMaxButton","totalBetLabel","Label","creditLabel","betInfoLabel","rollingCompletedCount","visible","isRollingCompleted","totalBetValue","currentBetValue","currentPayTableTag","isAutoSpin","autoSpinTimer","onLoad","that","string","toString","node","on","event","detail","isOn","spin","clearTimeout","reset","BET_ONE","instance","playCoinsInsert","BET_MAX","playReelStop","length","lineSymbolsTags","getLineSymbolsTag","paytable","getComponent","paytableRet","isWinning","Object","keys","playLineWin","playCoinsWin","showWinningSymbolsAndPay","updateCurrenCredit","setTimeout","setButtonsLocked","setCurrentCredit","start","loadUserDefault","getCurrentCredit","playReelRoll","i","isLocked","m","stopNode","getWinnerStop","stopComponent","push","tag","winningAmount","item","n","indexes","blink","parseInt","winningValue","value","playGameOver","backToHall","director","loadScene"],"mappings":"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","file":"game.js","sourceRoot":"..\\..\\..\\..\\..\\assets\\scripts\\controllers","sourcesContent":["//defines the main driver of the game\nvar Reel=require('reel'),\n    OnOffButton=require('on-off-button'),\n    AudioManager=require('audio-manager'),\n    UserDefault=require('user-default'),\n    PayTableTags=require('paytable-tags')();\ncc.Class({\n    extends: cc.Component,\n    properties: {\n        //PUBLIC PROPERTIES\n        //gets/sets an array of Reel type (see reel.js asset) used to define the slot reels\n        reels:{\n            default:[],\n            type:[Reel]\n        },\n        //gets/sets the initial credit.\n        currentCredit:{\n            default:100,\n            type:cc.Integer\n        },\n        //gets/sets the amount of the \"one bet\" mode\n        betOneValue:{\n            default:1,\n            type:cc.Integer\n        },\n        //gets/sets the amount of the \"max bet\" mode\n        betMaxValue:{\n            default:5,\n            type:cc.Integer\n        },\n        //gets/sets the OnOff spin button\n        spinButton:{\n            default:null,\n            type:OnOffButton\n        },\n        //gets/sets the OnOff auto-spin button\n        autoSpinButton:{\n            default:null,\n            type:OnOffButton\n        },\n        //gets/sets the OnOff bet one button\n        betOneButton:{\n            default:null,\n            type:OnOffButton\n        },\n        //gets/sets the OnOff bet max button\n        betMaxButton:{\n            default:null,\n            type:OnOffButton\n        },\n        //gets/sets total bet label\n        totalBetLabel:{\n            default:null,\n            type:cc.Label\n        },\n         //gets/sets credit label\n        creditLabel:{\n            default:null,\n            type:cc.Label\n        },\n         //gets/sets info label\n        betInfoLabel:{\n            default:null,\n            type:cc.Label\n        },\n         //gets/sets how many reels have been completed the roll operation\n        rollingCompletedCount:{\n            default:0,\n            visible:false,\n            type:cc.Integer\n        },\n         //gets/sets the flag that allows to undersatnd if all the reels have been completed its rolling operation\n        isRollingCompleted:{\n            default:true,\n            visible:false\n        },\n        //gets/sets the total bet value\n        totalBetValue:{\n            default:0,\n            visible:false,\n            type:cc.Integer\n        },\n        //gets/sets the current bet value (bet one or bet max)\n        currentBetValue:{\n            default:0,\n            visible:false,\n            type:cc.Integer\n        },\n        //gets/sets the current paytable tag (see paytable-tags.js asset)\n        currentPayTableTag:{\n            default:0,\n            visible:false,\n            type:cc.Integer\n        },\n        //gets set the auto-spin flag\n        isAutoSpin:{\n            default:false,\n            visible:false\n        },\n        //gets/sets the timer instance used for the auto/spin  timeout\n        autoSpinTimer:{\n            default:null,\n            visible:false\n        }\n    },\n    \n    onLoad: function () {\n        \n        var that = this;\n        \n        //sets the available credit.\n        this.creditLabel.string=this.currentCredit.toString();\n        //init bet info label\n        this.betInfoLabel.string=\"\";\n\n        //implements the spin button on/off event\n        this.spinButton.node.on('reel-spin', function (event) {\n            if (event.detail.isOn){\n                //play the game\n                that.spin();\n            }\n        });\n        //implements the auto-spin button on/off event\n        this.autoSpinButton.node.on('reel-auto-spin', function (event) {\n            //play the game as single spin or auto-spin\n            that.isAutoSpin===true ? that.isAutoSpin=false : that.isAutoSpin=true; \n            if (that.isAutoSpin){\n                if (event.detail.isOn){\n                    that.spin();\n                }\n            }else{\n               clearTimeout(that.autoSpinTimer);\n            }\n        });\n        //implements the bet one button on/off event\n        this.betOneButton.node.on('bet-one', function (event) {\n            if (event.detail.isOn){\n                //when this button is pushed down the bet max button will be reset\n                that.betMaxButton.reset();\n                //set bet value\n                that.currentBetValue=that.betOneValue;\n                that.currentPayTableTag=PayTableTags.BET_ONE;\n                that.betInfoLabel.string=that.currentBetValue.toString();\n                AudioManager.instance.playCoinsInsert();\n            }\n        });\n        //implements the bet-max button on/off event\n        this.betMaxButton.node.on('bet-max', function (event) {\n            if (event.detail.isOn){\n                //when this button is pushed down the bet one button will be reset\n                that.betOneButton.reset();\n                //set bet value\n                that.currentBetValue=that.betMaxValue;\n                that.currentPayTableTag=PayTableTags.BET_MAX;\n                that.betInfoLabel.string=that.currentBetValue.toString();\n                AudioManager.instance.playCoinsInsert();\n            }\n        });\n        //implements the rolling completed event of the rell.js class\n        this.node.on('rolling-completed', function (event) {\n            //this method counts all the completed rolling reels and evaluate the results\n            //if all the rells have been finished to roll.\n            that.rollingCompletedCount++;\n            AudioManager.instance.playReelStop();\n\n            if (that.rollingCompletedCount==that.reels.length){\n                that.rollingCompletedCount=0;\n                //gets the line symbols tags\n                var lineSymbolsTags=[];\n                lineSymbolsTags=that.getLineSymbolsTag();\n                \n                //create a paytable instance and checks if the tag symbols is a winning combination\n                var paytable=that.getComponent(\"paytable\"),\n                    paytableRet=paytable.isWinning(lineSymbolsTags,that.currentPayTableTag),\n                    isWinning=Object.keys(paytableRet).length>0;\n                    \n                if (isWinning){\n                    //WON!!!\n                    //if won spin and auto-spin will stop the execution\n                    that.isRollingCompleted=true;\n                    that.isAutoSpin ? that.autoSpinButton.reset() : that.spinButton.reset();\n                    that.isAutoSpin=false;\n                    //play sound\n                    AudioManager.instance.playLineWin();\n                    AudioManager.instance.playCoinsWin();\n                    //show winning symbols (animation)\n                    that.showWinningSymbolsAndPay(paytableRet);\n                }else{\n                    //LOST update credit\n                    that.updateCurrenCredit(that.currentCredit-that.currentBetValue);\n                    that.betInfoLabel.string=(-that.currentBetValue).toString();\n                    \n                    if (!that.isAutoSpin){\n                        //spin completed\n                        that.isRollingCompleted=true;\n                        that.spinButton.reset();\n                    }else{\n                        that.autoSpinTimer=setTimeout(function(){ \n                            //auto-spin completed...will restart\n                            that.spin();\n                        }, 1000);  \n                    }\n                }\n                if (that.isRollingCompleted){\n                    //unlocks all buttons\n                    that.setButtonsLocked(false);\n                    //update user default current credit\n                    UserDefault.instance.setCurrentCredit(that.currentCredit);\n                }\n            }\n        });\n        \n        \n        \n    },\n    start:function(){\n        //read all the user default\n        this.loadUserDefault();\n    },\n    loadUserDefault:function(){\n        //current credit\n        this.updateCurrenCredit(UserDefault.instance.getCurrentCredit(this.currentCredit));\n    },\n    spin:function(){\n\n        //checks if there is enough credit to play\n        if (this.currentCredit===0){\n            return;\n        }\n        //reset label info with current bet value\n        this.betInfoLabel.string=this.currentBetValue.toString();\n        \n        if (this.isRollingCompleted){\n            //sets total bet Label\n            this.totalBetValue+=this.currentBetValue;\n            this.totalBetLabel.string=this.totalBetValue.toString();\n                \n            if (!this.isAutoSpin){\n                //this.spinButton.isLocked=true;\n                this.isRollingCompleted=false;\n            }\n            //locks all buttons\n            this.setButtonsLocked(true);\n            AudioManager.instance.playReelRoll();\n            //starts reels spin\n            for (var i=0;i<this.reels.length;i++){\n                this.reels[i].spin();\n            }\n        }\n    },\n    setButtonsLocked:function(isLocked){\n        if (!this.isAutoSpin){\n            this.autoSpinButton.isLocked=isLocked;    \n        }\n        \n        this.spinButton.isLocked=isLocked;\n        this.betOneButton.isLocked=isLocked;\n        this.betMaxButton.isLocked=isLocked;\n    },\n    getLineSymbolsTag:function(){\n        var lineSymbolsTags=[];\n        for (var m=0;m<this.reels.length;m++){\n            var stopNode=this.reels[m].getWinnerStop();\n            var stopComponent=stopNode.getComponent(\"stop\");\n            lineSymbolsTags.push(stopComponent.tag);\n        }\n        return lineSymbolsTags;\n    },\n    showWinningSymbolsAndPay:function(paytableRet){\n       \n        var stopNode,\n            stopComponent,\n            winningAmount=0;\n\n         //loop on  the winning combinations throughout the symbols index\n         //note that it's possible to have one or more winning combinaiton\n        for (var i=0;i<paytableRet.length;i++){\n            var item=paytableRet[i];\n            for (var n=0;n<item.indexes.length;n++){\n                stopNode=this.reels[item.indexes[n]].getWinnerStop();\n                stopComponent=stopNode.getComponent(\"stop\");\n                stopComponent.blink();\n            }\n            winningAmount+=parseInt(item.winningValue);\n        }\n\n        //PAY update credit\n        this.updateCurrenCredit(this.currentCredit+winningAmount);\n        this.betInfoLabel.string=winningAmount.toString();\n    },\n    updateCurrenCredit:function(value){\n        this.currentCredit=value;\n        this.creditLabel.string=this.currentCredit.toString();\n        if (parseInt(this.currentCredit)<=0){\n            AudioManager.instance.playGameOver();\n            //TODO reset credit automatically\n            this.updateCurrenCredit(100);\n        }\n    },\n    backToHall:function(){\n        cc.director.loadScene(\"welcome\")\n    }\n\n});\n"]}